package uz.ishborApp.Entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPLIED".
*/
public class AppliedDao extends AbstractDao<Applied, Long> {

    public static final String TABLENAME = "APPLIED";

    /**
     * Properties of entity Applied.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property VacancyId = new Property(2, Long.class, "vacancyId", false, "VACANCY_ID");
        public final static Property VacancyName = new Property(3, String.class, "vacancyName", false, "VACANCY_NAME");
        public final static Property CategoryName = new Property(4, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property DateName = new Property(5, String.class, "dateName", false, "DATE_NAME");
    };


    public AppliedDao(DaoConfig config) {
        super(config);
    }
    
    public AppliedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPLIED\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"VACANCY_ID\" INTEGER," + // 2: vacancyId
                "\"VACANCY_NAME\" TEXT," + // 3: vacancyName
                "\"CATEGORY_NAME\" TEXT," + // 4: categoryName
                "\"DATE_NAME\" TEXT);"); // 5: dateName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPLIED\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Applied entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        Long vacancyId = entity.getVacancyId();
        if (vacancyId != null) {
            stmt.bindLong(3, vacancyId);
        }
 
        String vacancyName = entity.getVacancyName();
        if (vacancyName != null) {
            stmt.bindString(4, vacancyName);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(5, categoryName);
        }
 
        String dateName = entity.getDateName();
        if (dateName != null) {
            stmt.bindString(6, dateName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Applied readEntity(Cursor cursor, int offset) {
        Applied entity = new Applied( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // vacancyId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // vacancyName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // categoryName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // dateName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Applied entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVacancyId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setVacancyName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategoryName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDateName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Applied entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Applied entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
